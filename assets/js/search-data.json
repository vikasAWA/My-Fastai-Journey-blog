{
  
    
        "post0": {
            "title": "Cheetah Vs Leopard",
            "content": "Cheetah in News in India . Now a days, In India &quot;Cheetah&quot; has been making News. ​ The reason for this is that &quot;Cheetah&quot; has not been seen in India for nearly about 70 years. Cheetah is an extinct animal from 1950&#39;s. But, Now Indian Government has brought big cats from the southern African nation of Namibia to India. They are part of a reintroduction program and will live in a large open space. Cheetahs once lived in India, but died out about 70 years ago. Scientists hope the cats will learn to hunt deer and other wild animals in the area. And they hope the cheetahs will reproduce. ​ Link: https://economictimes.indiatimes.com/news/india/project-cheetah-india-welcomes-cheetahs-after-7-decades-of-extinction/videoshow/94261539.cms ​ . Reason for Extinction . The reasons for the extinction are hunting, human population growth and killing Cheetah due to misunderstanging it with &quot;Leopard&quot;. In this project I want to focus on this third reason, misundertood &quot;Cheetah&quot; with &quot;Leopard&quot; Yes, people misunderstood it with &quot;Leopard&quot;, since leopard often found to be attacking on Humans but &quot;Cheetah&quot; does not. But, they kind of look same. In this project I will try to build a good working model to distinguish between cheetah and leopard using Fastai Libraries. . Importing modules to download images . Installing and Importing the modules and defining function to search image and download images. . !!pip install -Uqq fastai duckduckgo_search . from duckduckgo_search import ddg_images from fastai.vision.all import * from fastcore.all import * from fastdownload import download_url def search_images(term, max_images=1): print(f&quot;Searching for {term}&quot;) return L(ddg_images(term, max_results=max_images)).itemgot(&quot;image&quot;) def get_image(term, max_n=2): im = download_url(search_images(term=term, max_images=max_n)[max_n-1], f&quot;{term}.jpg&quot;) return im . Difference between &quot;Cheetah&quot; and &quot;Leopard&quot;. . Black tear lines in &quot;Cheeetah&quot; face. . Cheetah have black tear lines that looks coming out ther eyes but a &quot;Leopard&quot; does not have that. Let&#39;s download some images and open that. . Image.open(get_image(&quot;Cheetah_face&quot;, max_n=1)).to_thumb(256, 256) . Searching for Cheetah_face . . 101.13% [106496/105303 00:00&lt;00:00] Let&#39;s have a look in Leopard face. . Image.open(get_image(&quot;leopard&quot;, max_n=1)).to_thumb(256, 256) . Searching for leopard . . 100.47% [704512/701228 00:00&lt;00:00] Pattern on their coat . Another key difference is Patterns over them, they may look like same, but in actual fact, a leopard has rosettes which are rose-like markings, and cheetahs have a solid round or oval spot shape. Let&#39;s have a look. . Image.open(get_image(&quot;leopard_skin&quot;, max_n=1)).to_thumb(256, 256) . Searching for leopard_skin . . 100.30% [245760/245036 00:00&lt;00:00] Image.open(get_image(&quot;cheetah_skin&quot;, max_n=5)).to_thumb(256, 256) . Searching for cheetah_skin . . 100.03% [229376/229306 00:00&lt;00:00] Download Data . Let&#39;s now download data. . searches = &quot;Cheetah&quot;, &quot;Leopard&quot; path = Path(&quot;cheetah_or_not&quot;) for o in searches: dest = (path/o) dest.mkdir(exist_ok=True, parents=True) download_images(dest, urls=search_images(f&quot;{o} photo&quot;, max_images=200)) . Searching for Cheetah photo Searching for Leopard photo . Lets get the list containing image files in path. . fns = get_image_files(path) fns . (#370) [Path(&#39;cheetah_or_not/Cheetah/9208f016-b294-4ff5-a6f9-4ff96a11121d.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/6c7f472f-484b-409a-a2ba-193089564145.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/e6f45e84-82b2-4756-86df-efe936d8288c.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/c3569fd2-22db-4b37-9444-fac738eebd16.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/912150a7-14bc-485f-9c92-c969f585eaaa.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/079f086a-7a84-4035-b771-e15d994f0293.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/1e6e0761-bdbb-4266-89b6-9db8e80bf48c.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/cac82d45-3028-49c6-a49e-8718d65bbb9c.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/5f70a604-7f3e-430f-b957-f64947e7b2f4.jpg&#39;),Path(&#39;cheetah_or_not/Cheetah/9c4b3124-3f6f-4ffc-bae1-aa16f02a7619.jpg&#39;)...] . Deleting files failed to open. . failed = verify_images(get_image_files(path)) failed.map(Path.unlink) len(failed) . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (125255808 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack. DecompressionBombWarning, . 4 . Let&#39;s create a template for the dataloaders with DataBlock. . template = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, get_y=parent_label, splitter= RandomSplitter(valid_pct=0.2, seed=42), item_tfms=Resize(224) ) dls = template.dataloaders(path) dls.show_batch(max_n=5, nrows=1) . Let&#39;s Train our model(Resnet50) . model_01 = vision_learner(dls, resnet50, metrics=error_rate) model_01.fine_tune(2) . /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter &#39;pretrained&#39; is deprecated since 0.13 and will be removed in 0.15, please use &#39;weights&#39; instead. f&#34;The parameter &#39;{pretrained_param}&#39; is deprecated since 0.13 and will be removed in 0.15, &#34; /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#39;weights&#39; are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights. warnings.warn(msg) . epoch train_loss valid_loss error_rate time . 0 | 0.913502 | 0.326423 | 0.095890 | 00:20 | . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (125255808 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack. DecompressionBombWarning, . epoch train_loss valid_loss error_rate time . 0 | 0.175672 | 0.191224 | 0.013699 | 00:20 | . 1 | 0.125082 | 0.145476 | 0.013699 | 00:20 | . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (125255808 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack. DecompressionBombWarning, /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (125255808 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack. DecompressionBombWarning, . Confusion Matrix . Well ! this model is trained to have more than 98% accuracy with an error rate of 1.3% that is quite great. We can draw conusion matrix to see model perfoemance. . interp = ClassificationInterpretation.from_learner(model_01) interp.plot_confusion_matrix() . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (125255808 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack. DecompressionBombWarning, . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (125255808 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack. DecompressionBombWarning, . As we can see everytime this model predicted correctly except for wher it was &#39;Cheetah&#39; and it predicted &#39;Leopard&#39;. . Prediction . let&#39;s make a prediction functoin which takes image and output the label and probability. . def Predict(im): pred, pred_idx, probs = model_01.predict(im) return f&quot;Prediction: {pred}, Probabilty: {probs[pred_idx]}&quot; . Now, Let&#39;s get an image and predict. . img = get_image(&quot;cheetah&quot;) Image.open(img).to_thumb(256, 256) . Searching for cheetah . . 102.00% [368640/361419 00:00&lt;00:00] Let&#39;s model predict the above image. . Predict(img) . &#39;Prediction: Cheetah, Probabilty: 1.0&#39; . Wow ! 100% accurate. That is great. Awesome model. Imagine having high tech &quot;goggles&quot; and we can apply deep learnings model to it. That would be really cool. . Thanks for reading. I hope enjoy this project. .",
            "url": "https://vikasawa.github.io/My-Fastai-Journey-blog/fastpages/fastai/jupyter/2022/09/25/Cheetah-vs-Leopard.html",
            "relUrl": "/fastpages/fastai/jupyter/2022/09/25/Cheetah-vs-Leopard.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Understanding Code for Lesson 1 of fast.ai",
            "content": "Hello, Everyone. . My name is Vikas Awasthi. I am taking Fastai course and completed my &#39;Leasson 1&#39; yesturday. I want to share this post because i faced some challenges in understanding the coding of Lesson 1. I don&#39;t have much of experience in coding. But after some serach on google, i came very close to understang the course. So, may be, for those who are just like me, this post can be helpful. . !pip install -Uqq fastai duckduckgo_search . What is &quot;-Uqq&quot; ? . Above line of code i understand, which is basically installing the packages. but i did not get what &quot;-Uqq&quot; does So, i searched and found this post in Fastai forum. . The Link for the post- https://forums.fast.ai/t/what-is-uqq/95324 . What is duckduckgo_search? . from duckduckgo_search import ddg_images . In the above line of code, We are importing a function from duckduckgo_search module. I did not know what this library used for? so, i searched about it found the documentation. The link for the documentation- https://pypi.org/project/duckduckgo-search/ . Actually, what this function &quot;ddg_image&quot; does, is if provide a keyword to this function and then it will return link related to that keyword for example: if we give keyword &quot;tree&quot; so it will return link which contain the image of &quot;tree&#39; . keywords = &#39;liberty tree&#39; r = ddg_images(keywords, max_results=1) print(r) . [{&#39;title&#39;: &#39;Liberty Tree | Architect of the Capitol | United States Capitol&#39;, &#39;image&#39;: &#39;https://www.aoc.gov/sites/default/files/460413.jpg&#39;, &#39;thumbnail&#39;: &#39;https://tse3.mm.bing.net/th?id=OIP.MMKkvSDLrzofbXA1MK1RrgHaLI&amp;pid=Api&#39;, &#39;url&#39;: &#39;http://aoc.gov/trees/liberty-tree&#39;, &#39;height&#39;: 1500, &#39;width&#39;: 998, &#39;source&#39;: &#39;Bing&#39;}] . If you click the link this link, you will find tree. &quot;max_result&quot; is number of results you want. . from fastcore.all import * . Now, above line of code will import all the function of fastcore module. Now will define a function for image search. . def search_images(term, max_images= 30): print(f&quot;Searcing for &#39;{term}&#39;&quot;) return L(ddg_images(term, max_results=max_images)).itemgot(&quot;image&quot;) . In above function &#39;term&#39; is the keyword which we want to search and &#39;max_images&#39; is the number of result which we want to see. So, this function will return the result the list containg all the links. . This function returning &#39;L&#39;, which work as list in fascore module. . What is &quot;L&quot; in search_images function? . L works exactly as list. . . The link for the documentation of fastcore- https://fastcore.fast.ai/000_tour.html . urls = search_images(&quot;Blue Whale&quot;, max_images = 50) urls[0] . Searcing for &#39;Blue Whale&#39; . &#39;https://idsb.tmgrup.com.tr/ly/uploads/images/2021/04/28/111577.jpeg&#39; . in the above lines of code we are using our search_images function and showing only one link out of 50. . Let&#39;s download image of that url. . from fastdownload import download_url . What is &#39;download_url&#39;? . &#39;dowload_url&#39; is used to download the data on the link provided. . dest = &#39;blue_whale.jpg&#39; download_url(urls[0], dest) . . 100.14% [614400/613570 00:00&lt;00:00] Path(&#39;blue_whale.jpg&#39;) . The above line of code has downloaded the image with the name &quot;blue_whale.jpg&quot;. now i can see the image in my files. . Now, let&#39;s open the image. . from fastai.vision.all import * im = Image.open(dest) im.to_thumb(256, 256) . In the above line of code &quot;Image.open(&quot;image.jpg&quot;) is used to open the downloaded image and than that image is converted to thumbnail of size(256, 256). Now will repeat the process for &quot;Shark&quot; image . download_url(search_images(&#39;Shark&#39;, max_images=1)[0], &#39;shark.jpg&#39;, show_progress=False) Image.open(&#39;shark.jpg&#39;).to_thumb(256,256) . Searcing for &#39;Shark&#39; . Now, we will repeat the process for downloading many images of &quot;SharK&quot; and &quot;Blue whale&quot; with help of &quot;for&quot; loop. . searches = &quot;Shark&quot;, &quot;Blue Whale&quot; path = Path(&quot;blue_whale_or_not&quot;) from time import sleep for o in searches: dest = (path/o) dest.mkdir(exist_ok=True, parents=True) download_images(dest, urls=search_images(f&quot;{o} under water day photo&quot;)) sleep(10) download_images(dest, urls=search_images(f&quot;{o} under water night photo&quot;)) sleep(10) download_images(dest, urls=search_images(f&quot;{o} above water photo&quot;)) sleep(10) resize_image(path/o, max_size=400, dest=path/o) . Searcing for &#39;Shark under water day photo&#39; Searcing for &#39;Shark under water night photo&#39; Searcing for &#39;Shark above water photo&#39; Searcing for &#39;Blue Whale under water day photo&#39; Searcing for &#39;Blue Whale under water night photo&#39; Searcing for &#39;Blue Whale above water photo&#39; . download_image . From &#39;fastai.vision&quot; we are using &#39;download_images&#39; function which will download images into destination path. . . The link for the documentation- https://docs.fast.ai/vision.utils.html . failed = verify_images(get_image_files(path)) failed.map(Path.unlink) len(failed) . 3 . varify_images . This function varify each images whether it is opening or not if it does not, it delete that file with &quot;.unlink&quot; method. . dls = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=[Resize(256, method=&#39;squish&#39;)] ).dataloaders(path, bs=32) dls.show_batch(max_n=9) . Above code is already explained in the Lesson 1 notebook . Here what each of the DataBlock parameters means: . blocks=(ImageBlock, CategoryBlock), . The inputs to our model are images, and the outputs are categories (in this case, &quot;bird&quot; or &quot;forest&quot;). . get_items=get_image_files, . To find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path). . splitter=RandomSplitter(valid_pct=0.2, seed=42), . Split the data into training and validation sets randomly, using 20% of the data for the validation set. . get_y=parent_label, . The labels (y values) is the name of the parent of each file (i.e. the name of the folder they&#39;re in, which will be bird or forest). . item_tfms=[Resize(192, method=&#39;squish&#39;)] . Before training, resize each image to 192x192 pixels by &quot;squishing&quot; it (as opposed to cropping it). . learn = vision_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(3) . /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter &#39;pretrained&#39; is deprecated since 0.13 and will be removed in 0.15, please use &#39;weights&#39; instead. f&#34;The parameter &#39;{pretrained_param}&#39; is deprecated since 0.13 and will be removed in 0.15, &#34; /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#39;weights&#39; are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights. warnings.warn(msg) Downloading: &#34;https://download.pytorch.org/models/resnet18-f37072fd.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth . epoch train_loss valid_loss error_rate time . 0 | 1.299414 | 1.571170 | 0.424242 | 00:44 | . epoch train_loss valid_loss error_rate time . 0 | 0.834886 | 0.747714 | 0.303030 | 00:55 | . 1 | 0.559681 | 0.533965 | 0.121212 | 00:54 | . 2 | 0.395499 | 0.503050 | 0.151515 | 00:53 | . vision_learner . vision_learner helps to define our learner, the arguments given are &quot;datablock&quot; and computer vision model &quot;resnet18&quot; and metrics for error. . fine_tune() method which automatically uses best practices for fine tuning a pre-trained model. . As per Sir Jeremy Howard- &quot;&quot;Fine-tuning&quot; a model means that we&#39;re starting with a model someone else has trained using some other dataset (called the pretrained model), and adjusting the weights a little bit so that the model learns to recognise your particular dataset. In this case, the pretrained model was trained to recognise photos in imagenet, and widely-used computer vision dataset with images covering 1000 categories) For details on fine-tuning and why it&#39;s important, check out the free fast.ai course.&quot; . . . The link for the documentation- https://docs.fast.ai/vision.learner.html#vision_learner . Now ! our model is ready. Let&#39;s see the mopdel prediction. . is_blue_whale,_,probs = learn.predict(PILImage.create(&#39;blue_whale.jpg&#39;)) print(f&quot;This is an {is_blue_whale}&quot;) print(f&quot;Probability it&#39;s an Blue Whale: {probs[0]:.4f}&quot;) . This is an Blue Whale Probability it&#39;s an Blue Whale: 0.9964 . Good job, resnet18. 😀 . Thank you for watching the post, i hope it is helpful to you. .",
            "url": "https://vikasawa.github.io/My-Fastai-Journey-blog/fastpages/fastai/jupyter/2022/09/24/Lesson-1.html",
            "relUrl": "/fastpages/fastai/jupyter/2022/09/24/Lesson-1.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vikasawa.github.io/My-Fastai-Journey-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vikasawa.github.io/My-Fastai-Journey-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello, Everyone. My name is Vikas Awasthi and i am taking fast.ai course, and i will be blogging about my journey of learning in this website. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vikasawa.github.io/My-Fastai-Journey-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vikasawa.github.io/My-Fastai-Journey-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}